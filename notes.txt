Module 1 Summary : 
- Backend technologies include various types of servers and supporting infrastructures such as programming languages, frameworks, and other hardware  
- Node.js is the server-side component of JavaScript. 
- The require statement can be called from anywhere in the app code, is bound dynamically, and is synchronous, whereas the import statement can only be called at the beginning of a file, is bound statically, and is asynchronous.  
- Client-side JavaScript is used to process front-end user interface elements, and server-side JavaScript is used to enable access to different kinds of servers and web applications. 
- With server-side JavaScript, Node.js applications process and route web service requests from the client. 
- To make a function or a value available to Node.js applications that import your module, add a property to the implicit exports object. 
- Core modules include bare minimum functionality, local modules are those that you create for your application, and the Node.js community creates third-partymodules 
- A local install means only the application within the directory of the installed can access the package, whereas a global install means that any application on the machine can access the package 

Module 2 Summary :
- Asynchronous network operations can be handled using callback functions in order to prevent blocking JavaScript code  
- A callback function must invoke another callback function to pass a message from the Node.js module back to the main application after the Node.js module receives a response message 
- Nested callbacks can be difficult to read and debug. Inversion of control causes trust issues when dealing with third-party code 
- Promise objects are most useful for operations that are time-consuming and can block resources 
- JSON.parse() and JSON.stringify() are two methods used to parse JSON objects 

Module 3 Summary : 
- Developers rely on third-party packages to extend Node.js.  
- You can use the npm application to manage Node.js packages in your Node.js framework installation. 
- The MVC architecture style divides a back-end application into three parts: the model, the view, and the controller.  
- REST API frameworks use HTTP methods to communicate with each other. 
- Express abstracts low-level details.  
- Routing can be handled at the application level or at the router level.  
- Five types of middleware are application level, router level, error handling, built-in middleware, and third party.  
- Template rendering is the ability of the server to fill in dynamic content.  
- The npm jsonwebtoken package should be required in an Express application to authenticate a user. 

Express Best Practices.
* Use a directory structure in both an Express.js application and an API that includes node_modules/ config/, models/, and routes/ folders
* Best practiices when developing RESTfuil APIs include:
    - Use a noun as a resource identifier
    - Use HTTP status codes correctly
    - Black-box test REST APIs using SuperTest. Black box testing, a form of testing that is performed with no knowledge of a system's internals, can be carried out to evaluate the functionality, security, performance, and other aspects of an application. Dynamic code analysis is an example of automated black box security testing.
    - Use JWT-based stateless authentication
    - Include good documentation ( for APIs especially)
* Other tips include:
    - Following capitalization conventions
    - Use config files for variables and group similar functioning routes into their own files

What I've learned:
- Explained components of the back end of a web application
- Highlighted the importance of a robust, scalable back end 
- Node.js Modules and diferences between import() and require()
- Asynchronous I/O with Callback Programming: this topic covered the way that Node.js works in a non-blocking manner. 
It explained very well how Node.js framework receives an HTTP response message from the remote server and it calls the callback function and handles the Http response message.

- Emphatised how callbacks work
- Amazing Glossaries and Cheatsheets with key concepts and essential/fundamental operations/structures of code
- Very well built Practice Quizes and Graded Quizes which cover very well the provided knowledge and test your logic behind.
- Routing, Middleware, Routers and Templating
- Handling Authentication and Authorization in NodeJS

- Insights and viewpoints of experts( like James Reeve and Daniel Rudnitski -> Full Stack Software Engineer at IBM ) regarding: 
* Server-Side JavaScript and Node.js, 
* Using Anonymous Callback Functions in Node.js
* Using JSON & JavaScript
* Working with Third-Party Node.js Extensions
* Working with Back-end JavaScript Frameworks and Express

- Hands-on Labs: 
* Creating a Server with ServerSide JAvaScript 
* Promises and Callbacks
* Async Callback Programming
* CRUD Operations with Node.js and Express
* Work on Middlewares, use JWT for authentication with Express server
